<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simulated Keylogger GUI</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8; /* Light blue-gray background */
        }
        /* Custom scrollbar for the log area */
        .log-area::-webkit-scrollbar {
            width: 8px;
        }
        .log-area::-webkit-scrollbar-track {
            background: #e2e8f0; /* Light gray track */
            border-radius: 10px;
        }
        .log-area::-webkit-scrollbar-thumb {
            background: #94a3b8; /* Gray thumb */
            border-radius: 10px;
        }
        .log-area::-webkit-scrollbar-thumb:hover {
            background: #64748b; /* Darker gray on hover */
        }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white p-8 rounded-xl shadow-2xl w-full max-w-2xl border border-gray-200">
        <h1 class="text-4xl font-bold text-center mb-6 text-gray-800">
            <span class="inline-block mr-2">‚å®Ô∏è</span> Simulated Keylogger
        </h1>
        <p class="text-center text-sm text-gray-600 mb-8">
            Type into the input field below to see keystrokes logged. This is a browser-based simulation for educational purposes and cannot log system-wide keystrokes.
        </p>

        <div class="mb-6">
            <label for="keyInput" class="block text-gray-700 text-lg font-semibold mb-2">Type Here:</label>
            <input
                type="text"
                id="keyInput"
                class="w-full p-4 border-2 border-blue-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-800 text-lg shadow-sm transition duration-300 ease-in-out transform hover:scale-100"
                placeholder="Start typing..."
            >
        </div>

        <div class="mb-6">
            <label for="logOutput" class="block text-gray-700 text-lg font-semibold mb-2">Logged Keystrokes:</label>
            <textarea
                id="logOutput"
                class="log-area w-full h-64 p-4 border-2 border-gray-300 rounded-lg bg-gray-50 text-gray-800 text-base resize-none overflow-y-auto shadow-inner focus:outline-none focus:border-gray-400"
                readonly
                placeholder="Keystrokes will appear here..."
            ></textarea>
        </div>

        <div class="flex flex-col sm:flex-row justify-center gap-4">
            <button
                id="clearLogButton"
                class="flex-1 bg-red-500 hover:bg-red-600 text-white font-bold py-3 px-6 rounded-lg shadow-lg hover:shadow-xl transition duration-300 ease-in-out transform hover:-translate-y-1 focus:outline-none focus:ring-2 focus:ring-red-400 focus:ring-opacity-75"
            >
                <span class="inline-block mr-2">üóëÔ∏è</span> Clear Log
            </button>
            <button
                id="saveLogButton"
                class="flex-1 bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-6 rounded-lg shadow-lg hover:shadow-xl transition duration-300 ease-in-out transform hover:-translate-y-1 focus:outline-none focus:ring-2 focus:ring-green-400 focus:ring-opacity-75"
            >
                <span class="inline-block mr-2">üíæ</span> Save Log to File
            </button>
        </div>

        <p class="text-center text-xs text-gray-500 mt-8">
            Disclaimer: This tool is for educational purposes only. Unauthorized keylogging is illegal and unethical.
        </p>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const keyInput = document.getElementById('keyInput');
            const logOutput = document.getElementById('logOutput');
            const clearLogButton = document.getElementById('clearLogButton');
            const saveLogButton = document.getElementById('saveLogButton');

            // Function to log keystrokes
            keyInput.addEventListener('keydown', (event) => {
                const key = event.key;
                let displayKey = '';

                // Handle special keys for better readability
                if (key === ' ') {
                    displayKey = ' '; // Space
                } else if (key === 'Enter') {
                    displayKey = '\n'; // New line for Enter
                } else if (key === 'Tab') {
                    displayKey = '[TAB]';
                } else if (key === 'Backspace') {
                    displayKey = '[BACKSPACE]';
                } else if (key === 'Shift' || key === 'Control' || key === 'Alt' || key === 'Meta') {
                    // Ignore modifier keys themselves from being logged as individual characters
                    displayKey = '';
                } else if (key.length === 1) {
                    // Log single characters directly
                    displayKey = key;
                } else {
                    // Log other special keys by their name in brackets
                    displayKey = `[${key.toUpperCase()}]`;
                }

                // Append the key to the log output
                if (displayKey) {
                    logOutput.value += displayKey;
                    // Scroll to the bottom of the textarea
                    logOutput.scrollTop = logOutput.scrollHeight;
                }
            });

            // Clear Log button functionality
            clearLogButton.addEventListener('click', () => {
                logOutput.value = '';
                keyInput.value = ''; // Also clear the input field
                keyInput.focus(); // Focus back on the input for convenience
            });

            // Save Log to File button functionality
            saveLogButton.addEventListener('click', () => {
                const logContent = logOutput.value;
                if (logContent.trim() === '') {
                    alert('The log is empty. Type something first!');
                    return;
                }

                // Create a Blob containing the log content
                const blob = new Blob([logContent], { type: 'text/plain;charset=utf-8' });

                // Create a temporary URL for the Blob
                const url = URL.createObjectURL(blob);

                // Create a temporary anchor element to trigger the download
                const a = document.createElement('a');
                a.href = url;
                a.download = 'simulated_keylog.txt'; // Suggested file name
                document.body.appendChild(a); // Append to body to make it clickable

                // Programmatically click the anchor to trigger download
                a.click();

                // Clean up: remove the anchor and revoke the URL
                document.body.removeChild(a);
                URL.revokeObjectURL(url);

                alert('Log saved to simulated_keylog.txt!');
            });
        });

        // Custom alert function to replace window.alert
        function alert(message) {
            const alertBox = document.createElement('div');
            alertBox.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';
            alertBox.innerHTML = `
                <div class="bg-white p-6 rounded-lg shadow-xl max-w-sm w-full text-center">
                    <p class="text-lg font-semibold text-gray-800 mb-4">${message}</p>
                    <button id="closeAlert" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition duration-300 ease-in-out">
                        OK
                    </button>
                </div>
            `;
            document.body.appendChild(alertBox);

            document.getElementById('closeAlert').addEventListener('click', () => {
                document.body.removeChild(alertBox);
            });
        }
    </script>
</body>
</html>
